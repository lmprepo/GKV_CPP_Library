Библиотека состоит из двух классов: 

Класс LMP_Device содержит базовую логику обработки пакетов протокола информационного обмена ГКВ. 

Класс GKV_Device наследует LMP_Device и представляет собой описание работы с serial-интерфейсом для Linux и Windows с использованием стандартных библиотек.

-----------------------------------------
public-методы класса LMP_Device:
-----------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------
ПРИЕМ И ЗАПИСЬ ДАННЫХ С ИНЕРЦИАЛЬНОГО МОДУЛЯ:
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
void RunDevice(); - запускает работу приема данных с модуля в отдельном потоке.
-----------------------------------------

-----------------------------------------
uint8_t Receive_Process(); - запускает работу приема данных с модуля в текущем потоке. 
Возвращает состояние приема пакета, возвращает 0, если в приемном буфере нет преамбулы, 1 - если в приемном буфере была обнаружена преамбула, но не сошлась контрольная сумма, 2 - если принят корректный пакет.
-----------------------------------------

-----------------------------------------
void StartWriteBinaryData(); - запускает запись принимаемых данных в бинарный файл Log_Data_{дата-время начала записи} в отдельном потоке. Запись идет порциями по 34 кБ.
-----------------------------------------

-----------------------------------------
void StopWriteBinaryData(); - останавливает запись данных в бинарный файл
-----------------------------------------


--------------------------------------------------------------------------------------------------------------------------------------------------------------
УСТАНОВКА ОБРАБОТЧИКОВ ПРИНЯТЫХ ДАННЫХ
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
void SetReceivedPacketCallback(std::function<void(GKV_PacketBase *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый из принятых пакетов.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetSettingsReceivedCallback(std::function<void(GKV_Settings *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый принятый пакет, содержащий настройки инерциального модуля.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetADCDataReceivedCallback(std::function<void(GKV_ADCData *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый стандартный пакет алгоритма "Коды АЦП".

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetRawDataReceivedCallback(std::function<void(GKV_RawData *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый стандартный пакет алгоритма "Данные с датчиков".

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetGyrovertDataReceivedCallback(std::function<void(GKV_GyrovertData *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый стандартный пакет алгоритмов "AHRS:Фильтр Калмана" и "AHRS:Фильтр Махони".

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetInclinometerDataReceivedCallback(std::function<void(GKV_InclinometerData *)>ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый стандартный пакет алгоритма "Инклинометр".

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetBINSDataReceivedCallback(std::function<void(GKV_BINSData *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый стандартный пакет алгоритмов "БИНС", "БИНС:ESKF+СНС" и "БИНС:ESKF5+СНС".

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetGNSSDataReceivedCallback(std::function<void(GKV_GpsData *)>ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый стандартный пакет данных ГНСС.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetExtGNSSDataReceivedCallback(std::function<void(GKV_GpsDataExt *)>ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый расширенный пакет данных ГНСС.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetCustomPacketReceivedCallback(std::function<void(GKV_CustomData *)>ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый наборный пакет данных вне зависимости от его размера.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------

-----------------------------------------
void SetCustomPacketParamReceivedCallback(std::function<void(GKV_CustomDataParam *)> ptrReceivedPacketProcessingFun); - задает пользовательскую функцию, которая будет являться коллбэком на каждый пакет, содержащий параметры наборного пакета.

ВНИМАНИЕ: При работе цикла приема данных в отдельном потоке, данный коллбэк также будет исполняться в этом же потоке и при большом времени работы может повлиять на прием данных.
-----------------------------------------


--------------------------------------------------------------------------------------------------------------------------------------------------------------
УСТАНОВКА ПАРАМЕТРОВ РАБОТЫ ИНЕРЦИАЛЬНОГО МОДУЛЯ
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
void SetAlgorithm(uint8_t algorithm_register_value); - устанавливает на устройстве алгоритм обработки данных. Принимает следующие входные значения:

 - GKV_ADC_CODES_ALGORITHM = 0x00
 - GKV_SENSORS_DATA_ALGORITHM = 0x01
 - GKV_ORIENTATION_KALMAN_ALGORITHM = 0x02
 - GKV_INCLINOMETER_ALGORITHM = 0x04
 - GKV_ORIENTATION_MAHONY_ALGORITHM = 0x05
 - GKV_BINS_NAVIGATON_ALGORITHM = 0x06
 - GKV_CUSTOM_ALGORITHM = 0x07
 - GKV_KALMAN_GNSS_NAVIGATON_ALGORITHM = 0x08
 - GKV_ESKF5_NAVIGATON_ALGORITHM = 0x09
 -----------------------------------------

-----------------------------------------
void SetBaudrate(uint8_t baudrate_register_value); - устанавливает на устройстве битрейт основного интерфейса. Принимает следующие входные значения:

 - GKV_BAUDRATE_921600 = 0x00
 - GKV_BAUDRATE_460800 = 0x01
 - GKV_BAUDRATE_230400 = 0x02
 - GKV_BAUDRATE_115200 = 0x03
 - GKV_BAUDRATE_1000000 = 0x04
 - GKV_BAUDRATE_2000000 = 0x05
 - GKV_BAUDRATE_3000000 = 0x06
-----------------------------------------

-----------------------------------------
void SetDefaultAlgorithmPacket(); - устанавливает на выдачу из устройства стандартный пакет данных для заданного алгоритма.
-----------------------------------------

-----------------------------------------
void SetCustomAlgorithmPacket(); - устанавливает на выдачу из устройства наборный пакет данных с выбранными параметрами из списка в LMP_CustomPacket.h
-----------------------------------------

-----------------------------------------
void SetCustomPacketParam(uint8_t* param_array_ptr, uint8_t quantity_of_params); - устанавливает параметры наборного пакета, которые должно выдавать устройство.
Принимает указатель на массив uint8_t таких параметров и их количество. 

ВНИМАНИЕ: функция не имеет защиты от записи некорректных параметров наборного пакета!
-----------------------------------------

-----------------------------------------
void SetAccelerationUnits(uint8_t units) - устанавливает на устройстве единицы измерения ускорения (g или м/с2). Принимает следующие входные значения:

 - GKV_G = 0x00
 - GKV_MS2 = 0x01
-----------------------------------------

-----------------------------------------
void SetAngularRateUnits(uint8_t units) - устанавливает на устройстве единицы измерения угловой скорости (рад/с или град/с). Принимает следующие входные значения:

 - GKV_RADIANS_PER_SECOND = 0x00
 - GKV_DEGREES_PER_SECOND = 0x01
-----------------------------------------

-----------------------------------------
void SetAngleUnits(uint8_t units) - устанавливает на устройстве единицы измерения углов (радианы или градусы). Принимает следующие входные значения:

 - GKV_RADIANS = 0x00
 - GKV_DEGREES = 0x01
-----------------------------------------


--------------------------------------------------------------------------------------------------------------------------------------------------------------
ОТПРАВКА ЗАПРОСОВ НА ИНЕРЦИАЛЬНЫЙ МОДУЛЬ
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
void CheckConnection(); - отправляет на ГКВ запрос на проверку соединения. 
Ответом на этот запрос является пакет типа GKV_CONFIRM_PACKET, который можно обработать в колбэке от каждого принимаемого пакета.
-----------------------------------------

-----------------------------------------
void RequestDeviceID(); - отправляет на ГКВ запрос идентификационных данных устройства. 
Ответом на этот запрос является пакет типа GKV_DEV_ID_PACKET, который можно обработать в колбэке от каждого принимаемого пакета.
-----------------------------------------

-----------------------------------------
void RequestSettings(); - отправляет на ГКВ запрос текущих настроек устройства. 
Ответом на этот запрос является пакет типа GKV_DEV_SETTINGS_PACKET, который можно обработать в колбэке от каждого принимаемого пакета или специализированном колбэке для пакета настроек.
-----------------------------------------

-----------------------------------------
void RequestData(); - отправляет на ГКВ запрос данных. 
Ответом на этот запрос является пакет содержащий данные, соответствующие текущему алгоритму и настройкам.
ВНИМАНИЕ: Целесообразно использовать данную функцию при установленном режиме частоты выдачи данных "По запросу"
-----------------------------------------

-----------------------------------------
void RequestCustomPacketParams(); - отправляет на ГКВ запрос текущих настроек устройства. 
Ответом на этот запрос является пакет типа GKV_CUSTOM_DATA_PARAM_PACKET, который можно обработать в колбэке от каждого принимаемого пакета или в специализированном колбэке для данного пакета.
-----------------------------------------

-----------------------------------------
void ResetDevice(); - отправляет на ГКВ команду на сброс устройства. 
Ответом на этот запрос является пакет типа GKV_CONFIRM_PACKET, который можно обработать в колбэке от каждого принимаемого пакета.
-----------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------
ПОЛУЧЕНИЕ ТЕКУЩИХ ПАРАМЕТРОВ
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------
uint8_t GetInputPacketType(); - возвращает тип последнего принятого с устройства пакета. 
-----------------------------------------

-----------------------------------------
uint8_t GetDeviceAddress() - возвращает адрес подключенного устройства. 
-----------------------------------------

